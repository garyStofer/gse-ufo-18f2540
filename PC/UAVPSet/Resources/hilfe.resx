<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="baro" xml:space="preserve">
    <value>Influence of the air pressure sensor on the gas (proportional): 1</value>
  </data>
  <data name="baroDif" xml:space="preserve">
    <value>Influence of the air pressure sensor on the gas (differential): 4</value>
  </data>
  <data name="baroTemp" xml:space="preserve">
    <value>Temperature compensation for air pressure sensor (use = 13)</value>
  </data>
  <data name="Differenzial" xml:space="preserve">
    <value>Value -99 bis 99 (mostly -20 to +20)
Serves the attitude of the reactivity. Usually the differential value becomes negative set sign to proportional value
The value is too high, when the UFO is bouncing up or lies unstably in the air.
For YAW use 0.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="EbenenAusgleich" xml:space="preserve">
    <value>Not supported yet!!!</value>
  </data>
  <data name="EmpfaengerImpulse" xml:space="preserve">
    <value>Mostly positive
Indicates which receiver impulses being evaluated (positive/negatively).</value>
  </data>
  <data name="GasKanal" xml:space="preserve">
    <value>Graupner-modus (K1=Gas, K2=Roll, K3=Nick, K4=Gier)
Futaba/Robbe-modus (K1=Roll, K2=Nick, K3=Gas, K4=Gier)</value>
  </data>
  <data name="HalbRollNick" xml:space="preserve">
    <value>Roll- und Nick-Steuerknüppelsignale werden in der Wirkung halbiert (Specky-bit)
This is particularly  for proportional values &gt; 20 and helpful for beginners!</value>
  </data>
  <data name="Impuls" xml:space="preserve">
    <value>Updaterate of controllers
Min  value +3
Engines have to start faultless!</value>
  </data>
  <data name="Integral" xml:space="preserve">
    <value>values -99 bis 99 (same Vorzeichen like proportional)
The control portion definiting the total gyro value over time. Important for the Heading Lock of the yaw channel. A too high value permits the UFO bouncing up, a too small value doesn´t turn back  the UFO exactly after an angular momentum to its initial position.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="IntegralLimiter" xml:space="preserve">
    <value>Integral Limiter 
Always positiv! 
Maximum 127/Integral=Integral Limiter
(Example Integral= 6  --&gt;  127/6=21.16 rounded offt=21, Integral Limiter may be Max 21!)</value>
  </data>
  <data name="Integrierzustand" xml:space="preserve">
    <value>LEDs showing condition of integral (only indicating function, no influence on the parameters)</value>
  </data>
  <data name="Kameraausgleich" xml:space="preserve">
    <value>Indicates how strong the pitch/rolling motions at the camera will become balanced (Tilt).</value>
  </data>
  <data name="Kompass" xml:space="preserve">
    <value>Defines how heavy the deviation of target direction  intervenes
in the regulation. Values about -99 to +99, default is 0</value>
  </data>
  <data name="Leerlaufgas" xml:space="preserve">
    <value>The Engines have to run after for some seconds, when gas is at zero! </value>
  </data>
  <data name="Limiter" xml:space="preserve">
    <value>Limiter (always positive !)
Since 3.13 absolent for Roll and Nick. Use 25 for YAW</value>
  </data>
  <data name="Neutral" xml:space="preserve">
    <value>Neutral value of the linear sensor for this axle when exact Neutral value of the linear sensor for this axle, with accurately horizontal situation of the UAVP.
Value investigated in linearsensor, when accu sticked - must be transferred over the function!</value>
  </data>
  <data name="Proportional" xml:space="preserve">
    <value>Value -99 to 99 
The controls interest,which is measured and/or through handed directy by transmitter and gyros.
The value is too small, when the UFO reacts badly to roll/nodding to your instructions. The value is too high, if the UFO is bouncing up.
For YAW use 0.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="Unterspannung" xml:space="preserve">
    <value>Shows on with which tension  the piezo summer/red LED responds.
Avoids over-discharging of the accus and crashes  by missing thrust performance.
Values by 3s from 43 to 45</value>
  </data>
  <data name="XModus" xml:space="preserve">
    <value>Shows teh way to fly.
+ = an arm forward into flight direction
X = 2 arms in iflight driection (45° staggerd to  + modus)
Note: X mode requires other parameters to prop. Diff.  integral</value>
  </data>
</root>