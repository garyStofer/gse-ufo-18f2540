<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="baro" xml:space="preserve">
    <value>Einfluss des Luftdrucksensors auf das Gas (Proportional): 1</value>
  </data>
  <data name="baroDif" xml:space="preserve">
    <value>Einfluss des Luftdrucksensors auf das Gas (Differential): 4</value>
  </data>
  <data name="baroTemp" xml:space="preserve">
    <value>Temperaturkompensation für Luftdrucksensor (ideal = 13)</value>
  </data>
  <data name="Differenzial" xml:space="preserve">
    <value>Werte -99 bis 99 (meist -20 bis +20)
Dient der Einstellung der Reaktionsfähigkeit. Meist wird der Differentialwert mit entgegen gesetztem Vorzeichen zum Proportionalwert eingesetzt.
Der Wert ist zu hoch, wenn das Ufo aufschaukelt oder instabil in der Luft liegt.
Bei Gier sollte hier 0 eingetragen werden.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="EbenenAusgleich" xml:space="preserve">
    <value> noch nicht unterstützt !!!</value>
  </data>
  <data name="EmpfaengerImpulse" xml:space="preserve">
    <value>Meist Positiv
Gibt an welche Empfängerimpulse ausgewertet werden (positiv/negativ).</value>
  </data>
  <data name="GasKanal" xml:space="preserve">
    <value>Graupner-Modus (K1=Gas, K2=Roll, K3=Nick, K4=Gier)
Futaba/Robbe-Modus (K1=Roll, K2=Nick, K3=Gas, K4=Gier)</value>
  </data>
  <data name="HalbRollNick" xml:space="preserve">
    <value>Roll- und Nick-Steuerknüppelsignale werden in der Wirkung halbiert (Specky-bit)
Dies ist vor allem für Proportionalwerte &gt; 20 und Anfänger hilfreich!</value>
  </data>
  <data name="Impuls" xml:space="preserve">
    <value>Updaterate der Regler
Min  Wert +3
Motoren müssen sauber Anlaufen!!</value>
  </data>
  <data name="Integral" xml:space="preserve">
    <value>Werte -99 bis 99 (gleiches Vorzeichen wie Proportional) 
Der Steueranteil der die Summe der Gyrowerte über die Zeit definiert. Ist vor allem für das
„Heading Lock“ des Gierkanals wichtig. Ein zu hoher Wert lässt das Ufo aufschaukeln, ein zu
geringer lässt das Ufo nach einem Drehimpuls nicht mehr ganz in die Ausgangslage
zurückkehren.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="IntegralLimiter" xml:space="preserve">
    <value>Integral Limiter 
Immer positiv! 
Maximal 127/Integral=Integral Limiter
(Beispiel Integral= 6  --&gt;  127/6=21.16 abgerundet=21, Integral Limiter darf Max 21 sein!)</value>
  </data>
  <data name="Integrierzustand" xml:space="preserve">
    <value>LEDs zeigen Integriererzustand (hat nur Anzeigende Funktion, keinen Einfluss auf die Parameter)</value>
  </data>
  <data name="Kameraausgleich" xml:space="preserve">
    <value>Gibt an wie stark die Nick/Rollbewegungen an der Kamera ausgeglichen werden (Tilt).</value>
  </data>
  <data name="Kompass" xml:space="preserve">
    <value>Definiert wie stark die Abweichung von der Sollrichtung
in die Regelung eingreift. Zwischen 4 und 8 hat sich als ideal herausgestellt.
Werte sind von -16 bis +16, default ist 0</value>
  </data>
  <data name="Leerlaufgas" xml:space="preserve">
    <value>Motoren müssen einige Sekunden nachlaufen, bei Gas auf Null! Wenn beim Sinken ein starkes Schaukeln auftritt kann ein Grund ein zu geringes Leerlaufgas sein. (Bei den Arkai ca. 50 einstellen) </value>
  </data>
  <data name="Limiter" xml:space="preserve">
    <value>Limiter (immer positiv!)
Seit 3.13 bei Roll und Nick nicht mehr in Verwendung. Bei Gier ca. 25 als Empfehlung.</value>
  </data>
  <data name="Neutral" xml:space="preserve">
    <value>Neutralwert des Linearsensors für diese Achse, bei exakt Waagerechter Lage des UAVP.
Wert wird beim anstecken des Akkus im Linearsensor ermittelt und muss über die Funktion Neutral übertragen werden!</value>
  </data>
  <data name="Proportional" xml:space="preserve">
    <value>Werte -99 bis 99 
Der Steueranteil, der direkt vom Sender und den Gyros gemessen bzw. durchgereicht wird.
Der Wert ist zu gering, wenn das Ufo schlecht auf Roll/Nick-Steuerbefehle reagiert. Der Wert ist zu hoch, wenn das Ufo aufschaukelt.
Bei Gier sollte hier 0 eingetragen werden.</value>
    <comment>Direkt aus der Anleitung entnommen (Test)</comment>
  </data>
  <data name="Unterspannung" xml:space="preserve">
    <value>Gibt an bei welcher Spannung der Piezo-Summer/Rote LED anspricht.
Vermeidet schädliche Tiefentladung der Akkus und Abstürze durch fehlende Schubleistung.
Werte bei 3s 43 bis 45</value>
  </data>
  <data name="XModus" xml:space="preserve">
    <value>Gibt die Art des Fliegens an.
+ = ein Ausleger nach vorn in Flugrichtung
X = 2 Ausleger in Flugrichtung(45° versetzt zum + Modus)
Achtung: X Modus erfordert andere Parameter Prop/ Diff/ Integral</value>
  </data>
</root>